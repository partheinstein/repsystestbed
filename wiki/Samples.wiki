#summary Examples of how to use the testbed

= Samples =

*Example 1 - Simple experiment for PeerTrust*
{{{
PetriNet workflow = new PetriNet(new PetriNetEdgeFactory());

FHG fhg0 = new FHG(new FeedbackHistoryEdgeFactory());
Place fhgPlace0 = new Place(fhg0);

PeerTrust pt0 = new PeerTrust();
Transition ptTransition0 = new Transition(pt0);
ptTransition0.setWorkflow(workflow);

RG rg1 = new RG(new ReputationEdgeFactory());
Place rgPlace1 = new Place(rg1);						

//create the workflow
workflow.addEdge(fhgPlace0, ptTransition0, 1);
workflow.addEdge(ptTransition0, rgPlace1, 1);
		
//parse the feedbacks from the arff file
DefaultArffFeedbackGenerator feedbackGen = new DefaultArffFeedbackGenerator();
ArrayList<Feedback> feedbacks1 = (ArrayList<Feedback>) feedbackGen.generateHardcoded(arffFileName1 + ".arff");

//put the first token and fire pt
Token t1 = new Token(feedbacks1, fhgPlace0);
fhgPlace0.putToken(t1, true);
ptTransition0.fire();

}}}

PeerTrust extends from Algorithm class (abstract). As a result, it must implement PetriNetElementIntf::ArrayList update(ArrayList<Token> tokens, Place p). The tokens contain the changes that occurred in their corresponding place. In the example above, the changes are feedbacks in FHG. The output is a set of changes that is to be reflected in the outgoing place. In this case, it is RG. Thus, PeerTrust returns a list of reputation graph edges. 
Notes: 
 * The testbed checks the type of the elements in the return list to determine whether the output place can update itself. For example, a list of reputation edges output by PeerTrust is passed as input to outgoing place RG with which it can update itself.
 * Both Algorithm and Graph implements ArrayList update(ArrayList<Token> tokens, Place p).